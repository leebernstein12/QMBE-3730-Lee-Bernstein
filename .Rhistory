library(ggplot2)
library(gridExtra)
library(tseries)
library(forecast)
graphics.off()
rm(list=ls())
#Data Range
start_date<-as.Date("2017-01-01")
end_date<-as.Date("2023-07-17")
g_stock = getSymbols('AAPL', from =start_date, to= end_date, auto.assign = FALSE)
g_stock
#Treat for the missing value
no.na<-which(is.na(g_stock[,6]))
g_stock[no.na,6]<g_stock[no.na-1,6]
g_stock_sel<-g_stock[,6]
g_stock_sel
g_stock_return<-diff(log(g_stock_sel))
g_stock_return
ddata<-decompose(tsdata,"multiplicative")
#Store the series in time series
tsdata<-ts(g_stock_sel,frequency = 25)
ddata<-decompose(tsdata,"multiplicative")
plot(ddata)
mymodel<-auto.arima(g_stock_sel)
mymodel
plot.ts(mymodel$residuals)
myforecast<-forecast(mymodel,level=c(95),h=30)
plot(myforecast)
myforecast
knitr::opts_chunk$set(echo = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice', sep = ',', header = TRUE)
read_file = read.csv('Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.csv', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.csv', sep = ',', header = TRUE)
read_file = readxl::read_xlsx('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
read_file = readxl::read_xlsx('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
read_file = read.cs('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
read_file = read.csv('/Users/leebernstein/Downloads/YonseiSchoolWork/DataAnalysisYonsei/Part2Practice/SGA_Raw.xlsx', sep = ',', header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages('ISLR2')
data(Auto, package = 'ISLR2')
str(Auto)
library(ISLR2)
sample.bool = function(N,n) {
bool.vec = rep(FALSE, N)
seq.sample = sample(1:N, n)
for(i in seq.sample){
bool.vec[i] <- TRUE
}
return(bool.vec)
}
return(bool.vec)
sample.bool = function(N,n) {
bool.vec = rep(FALSE, N)
seq.sample = sample(1:N, n)
for(i in seq.sample){
bool.vec[i] <- TRUE
}
return(bool.vec)
}
set.seed(1234)
N = nrow(Auto)
n = 160
attach(Auto)
bool.train = sample.bool(N,n)
bool.train
mpg_true = mpg == "TRUE"
mpg_true
mpg_true = mpg == "FALSE"
mpg_true
mpg_true = mpg == "TRUE"
mpg_true
mpg_true <- mpg == "TRUE"
mpg_true
mpg_true <- mpg == "0"
mpg_true <- mpg == "0"
mpg_true
mpg_true <- mpg == "1"
mpg_true
mpg_true <- mpg == 1
mpg_true
mpg_true <- mpg == 0
mpg_true
mpg_true = mpg == 0
mpg_true
mpg(TRUE)
mpg[TRUE]
mpg[FALSE]
mpg_true = mpg[TRUE]
mpg_true
mpg_true = mpg['TRUE']
mpg_true
mpg_true = mpg[]
mpg_true
mpg_true = mpg[]%>%
select.list('TRUE')%>%
mpg_true
mpg_true = mpg[]%>%
select.list('TRUE')%>%
mpg_true
mpg_true = mpg[]%>%
select.list('TRUE')%>%
mpg_true
mpg_true = mpg[]%>%
select.list(TRUE)%>%
mpg_true
mpg_true = mpg[]%>%
select.list(TRUE)%>%
mpg_true = mpg[]%>%
select.list(TRUE)
mpg_true = mpg[]%>%
select.list(mpg)==TRUE
mpg_true = mpg[]%>%
select.list(mpg)==TRUE
mpg_true
mpg_true
mpg_true = mpg[]%>%
select.list(mpg)==TRUE
mpg_true
mpg_true
select.list(mpg)==TRUE
mpg.train = mpg[bool.train]
mpg.train = mpg[bool.train]
mpg_train
mpg.train = mpg[bool.train]
mpg.train
horsepower
horsepower.train
horsepower.train = horsepower[bool.train]
horsepower.train
summary(lm.fit())
lm_fit(mpg.train~horsepower.train)
lm_fit=lm(mpg.train~horsepower.train)
summary(lm.fit)
lm_fit=lm(auto$mpg.train~auto$horsepower.train)
lm_fit=lm(Auto$mpg.train~Auto$horsepower.train)
lm_fit=lm(mpg.train~horsepower.train)
summary(lm.fit)
lm_fit=lm(mpg.train~horsepower.train)
lm.fit
knitr::opts_chunk$set(echo = TRUE)
horsepower.train = horsepower[bool.train]
knitr::opts_chunk$set(echo = TRUE)
install.packages('ISLR2')
data(Auto, package = 'ISLR2')
str(Auto)
library(ISLR2)
sample.bool = function(N,n) {
bool.vec = rep(FALSE, N)
seq.sample = sample(1:N, n)
for(i in seq.sample){
bool.vec[i] <- TRUE
}
return(bool.vec)
}
set.seed(1234)
N = nrow(Auto)
n = 500
attach(Auto)
bool.train = sample.bool(N,n)
set.seed(1234)
N = nrow(Auto)
n = 500
attach(Auto)
bool.train = sample.bool(N,n)
set.seed(1234)
N = nrow(Auto)
n = 500
attach(Auto)
bool.train = sample.bool(N,n)
set.seed(1234)
N = nrow(Auto)
n = 500
attach(Auto)
bool.train = sample.bool(N,n)
set.seed(1234)
N = nrow(Auto)
n = 500
attach(Auto)
bool.train = sample.bool(N,n)
knitr::opts_chunk$set(echo = TRUE)
st.X = scale(Caravan[,-86])
data(Caravan, package = "ISLR2")
str(Caravan)
st.X = scale(Caravan[,-86])
m1 = mean(Caravan[,1])
knitr::opts_chunk$set(echo = TRUE)
install.packages('ISLR2')
data(Auto, package = 'ISLR2')
str(Auto)
library(ISLR2)
sample.bool = function(N,n) {
bool.vec = rep(FALSE, N)
seq.sample = sample(1:N, n)
for(i in seq.sample){
bool.vec[i] <- TRUE
}
return(bool.vec)
}
install.packages("ISLR2")
knitr::opts_chunk$set(echo = TRUE)
install.packages('ISLR2')
data(Auto, package = 'ISLR2')
str(Auto)
library(ISLR2)
sample.bool = function(N,n) {
bool.vec = rep(FALSE, N)
seq.sample = sample(1:N, n)
for(i in seq.sample){
bool.vec[i] <- TRUE
}
return(bool.vec)
}
set.seed(1234)
N = nrow(Auto)
n = 500
attach(Auto)
bool.train = sample.bool(N,n)
set.seed(1234)
N = nrow(Auto)
n = 500
attach(Auto)
bool.train = sample.bool(N,n)
knitr::opts_chunk$set(echo = TRUE)
m1 = mean(Caravan[,1])
knitr::opts_chunk$set(echo = TRUE)
data(Caravan, package = "ISLR2")
str(Caravan)
st.X = scale(Caravan[,-86])
m1 = mean(Caravan[,1])
m1 = mean(Caravan[,1])
m1
set.seed(1234)
N = nrow(Auto)
n = 100
attach(Auto)
bool.train = sample.bool(N,n)
bool.train
mpg.train = mpg[bool.train]
mpg.train
horsepower.train = horsepower[bool.train]
horsepower.train
mpg.test = mpg[!bool.train]
horsepower.test =  horsepower[!bool.train]
lm.fit = lm(mpg.train~horsepower.train)
lm.fit = lm(mpg.train~horsepower.train)
lm.fit
yhat.train = predict(lm.fit, data.frame(horsepower.train))
yhat.train
rse.train =sqrt(sum((yhat.train-mpg.train)^2)/(n-2))
mpg.train
rse.train2 = sqrt(sum(lm.fit$residuals^2)/lm.fit$df.residual)
yhat.test = predict(lm.fit, data.frame(horsepower.train=horsepower.test))
rse.test = sqrt(sum(yhat.test-mpg.test)^2/((N-n)-2))
cat(sprintf("RSE.train = %.4f,\nRSE.train2 = %.4f\nRSE.test = %.4f", rse.train, rse.train2, rse.test))
m1.st = mean(st.x[,1])
m1.st = mean(st.x[,1])
m1.st = mean(st.X[,1])
summary(m1.st)
test = 1:1000
test.x = st.X[test]
test.y = Caravan$Purchase[test]
all = 1:nrow(Caravan)
train = all[-test]
train.x = st.X[train,]
train.y = Caravan$Purchase[train]
glm.fit = glm(Purchase ~ ., data=Caravan[train,], family = binomial)
glm.pred.p = predict(glm.fit, Caravan[test,], type = "response")
glm.pred = rep("No",1000)
glm.pred[glm.pred.p>0.5] = 'Yes'
table(glm.pred, test.Y)
test = 1:1000
test.x = st.X[test]
test.y = Caravan$Purchase[test]
all = 1:nrow(Caravan)
train = all[-test]
train.x = st.X[train,]
train.y = Caravan$Purchase[train]
glm.fit = glm(Purchase ~ ., data=Caravan[train,], family = binomial)
glm.pred.p = predict(glm.fit, Caravan[test,], type = "response")
glm.pred = rep("No",1000)
glm.pred[glm.pred.p>0.5] = 'Yes'
table(glm.pred, test.Y)
glm.fit = glm(Purchase ~ ., data=Caravan[train,], family = binomial)
glm.pred.p = predict(glm.fit, Caravan[test,], type = "response")
glm.pred = rep("No",1000)
glm.pred[glm.pred.p>0.5] = 'Yes'
table(glm.pred, test.y)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xts)
library(ggplot2)
library(gridExtra)
library(tseries)
library(forecast)
graphics.off()
rm(list=ls())
#Data Range
start_date<-as.Date("2023-05-01")
end_date<-as.Date("2023-07-17")
g_stock = getSymbols('META', from =start_date, to= end_date, auto.assign = FALSE)
g_stock
#Treat for the missing value
no.na<-which(is.na(g_stock[,6]))
g_stock[no.na,6]<g_stock[no.na-1,6]
g_stock_sel<-g_stock[,6]
g_stock_sel
g_stock_return<-diff(log(g_stock_sel))
g_stock_return
#Store the series in time series
tsdata<-ts(g_stock_sel,frequency = 25)
ddata<-decompose(tsdata,"multiplicative")
plot(ddata)
mymodel<-auto.arima(g_stock_sel)
mymodel
plot.ts(mymodel$residuals)
myforecast<-forecast(mymodel,level=c(95),h=30)
plot(myforecast)
myforecast
knitr::opts_chunk$set(echo = TRUE)
yhat.train = predict(lm.fit, data.frame(horsepower.train))
knitr::opts_chunk$set(echo = TRUE)
install.packages('ISLR2')
data(Auto, package = 'ISLR2')
str(Auto)
library(ISLR2)
sample.bool = function(N,n) {
bool.vec = rep(FALSE, N)
seq.sample = sample(1:N, n)
for(i in seq.sample){
bool.vec[i] <- TRUE
}
return(bool.vec)
}
set.seed(1234)
N = nrow(Auto)
n = 100
attach(Auto)
bool.train = sample.bool(N,n)
bool.train
mpg.train = mpg[bool.train]
mpg.train
horsepower.train = horsepower[bool.train]
horsepower.train
mpg.test = mpg[!bool.train]
horsepower.test =  horsepower[!bool.train]
lm.fit = lm(mpg.train~horsepower.train)
lm.fit
yhat.train = predict(lm.fit, data.frame(horsepower.train))
yhat.train
rse.train =sqrt(sum((yhat.train-mpg.train)^2)/(n-2))
mpg.train
rse.train2 = sqrt(sum(lm.fit$residuals^2)/lm.fit$df.residual)
yhat.test = predict(lm.fit, data.frame(horsepower.train=horsepower.test))
rse.test = sqrt(sum(yhat.test-mpg.test)^2/((N-n)-2))
cat(sprintf("RSE.train = %.4f,\nRSE.train2 = %.4f\nRSE.test = %.4f", rse.train, rse.train2, rse.test))
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xts)
library(ggplot2)
library(gridExtra)
library(tseries)
library(forecast)
graphics.off()
rm(list=ls())
#Data Range
start_date<-as.Date("2023-05-01")
end_date<-as.Date("2023-07-17")
g_stock = getSymbols('META', from =start_date, to= end_date, auto.assign = FALSE)
g_stock
#Treat for the missing value
no.na<-which(is.na(g_stock[,6]))
g_stock[no.na,6]<g_stock[no.na-1,6]
g_stock_sel<-g_stock[,6]
g_stock_sel
g_stock_return<-diff(log(g_stock_sel))
g_stock_return
#Data Range
start_date<-as.Date("2023-05-01")
end_date<-as.Date("2023-07-17")
meta_stock = getSymbols('META', from =start_date, to= end_date, auto.assign = FALSE)
meta_stock
#Treat for the missing value
no.na<-which(is.na(meta_stock[,6]))
meta_stock[no.na,6]<meta_stock[no.na-1,6]
meta_stock_sel<-meta_stock[,6]
meta_stock_sel
meta_stock_return<-diff(log(meta_stock_sel))
meta_stock_return
#Data Range
start_date<-as.Date("2023-05-01")
end_date<-as.Date("2023-07-17")
googl_stock = getSymbols('GOOGL', from =start_date, to= end_date, auto.assign = FALSE)
googl_stock
#Treat for the missing value
no.na<-which(is.na(googl_stock[,6]))
googl_stock[no.na,6]<googl_stock[no.na-1,6]
googl_stock_sel<-googl_stock[,6]
googl_stock_sel
googl_stock_return<-diff(log(googl_stock_sel))
googl_stock_return
merge(meta_stock_return, googl_stock_return, by='Date')
View(googl_stock)
View(googl_stock_return)
lm_fit = lm(meta_stock_return,googl_stock_return)
lm_fit = lm(meta_stock_return~googl_stock_return)
summary(lm_fit)
knitr::opts_chunk$set(echo = TRUE)
mg_merge = merge(meta_stock_return, googl_stock_return, by='Date')
merge(meta_stock_return, googl_stock_return, by='Date')
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xts)
library(ggplot2)
library(gridExtra)
library(tseries)
library(forecast)
graphics.off()
rm(list=ls())
#Data Range
start_date<-as.Date("2023-05-01")
end_date<-as.Date("2023-07-17")
meta_stock = getSymbols('META', from =start_date, to= end_date, auto.assign = FALSE)
meta_stock
#Treat for the missing value
no.na<-which(is.na(meta_stock[,6]))
meta_stock[no.na,6]<meta_stock[no.na-1,6]
meta_stock_sel<-meta_stock[,6]
meta_stock_sel
meta_stock_return<-diff(log(meta_stock_sel))
meta_stock_return
#Data Range
start_date<-as.Date("2023-05-01")
end_date<-as.Date("2023-07-17")
googl_stock = getSymbols('GOOGL', from =start_date, to= end_date, auto.assign = FALSE)
googl_stock
#Treat for the missing value
no.na<-which(is.na(googl_stock[,6]))
googl_stock[no.na,6]<googl_stock[no.na-1,6]
googl_stock_sel<-googl_stock[,6]
googl_stock_sel
googl_stock_return<-diff(log(googl_stock_sel))
googl_stock_return
mg_merge = merge(meta_stock_return, googl_stock_return, by='Date')
lm_fit = lm(meta_stock_return~googl_stock_return)
summary(lm_fit)
lm_fit = lm(mg_merge)
merge(meta_stock_return, googl_stock_return, by='Date')
lm_fit = lm(meta_stock_return~googl_stock_return)
summary(lm_fit)
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
games <- read_excel("games.xls")
games <- read_excel("/Users/leebernstein/Downloads/Business Analytics/Final Project/games.xls")
games <- read_excel("/Users/leebernstein/Downloads/Business Analytics/Final Project/games.xls")
games <- read_excel("Users/leebernstein/Downloads/Business Analytics/Final Project/games.xls")
games <- read_excel("/Users/leebernstein/Downloads/Business Analytics/Final Project/games.xlsx")
games
summary(games)
glimpse(games)
library(tidyverse)
```{r}
glimpse(games)
library(corrplot)
gamescorr = cor(games)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(gbm)
library(DALEX)
library(pROC)
library(AppliedPredictiveModeling)
library(tidyverse)
library(performanceEstimation)
library(patchwork)
grey = read_csv("Grey.csv") %>%
mutate_at(vars(DwellingType, Gender, Marital, ChildPresent,
Occupation, HomeValue, MagazineStatus, LastPaymentType,
GiftDonor), .funs = factor) %>%
mutate(Renewal = factor(ifelse(Renewal=="Yes", 1, 0)))
grey %>%
select(-CustomerID) %>%
keep(is.numeric) %>%
cor() %>%
corrplot::corrplot(tl.cex = 0.6)
games
knitr::opts_chunk$set(echo = TRUE)
read.csv("/Users/leebernstein/Downloads/Advanced BA/Data Files/loan_default_data_set.csv")
loans = read.csv("/Users/leebernstein/Downloads/Advanced BA/Data Files/loan_default_data_set.csv")
loans
summary(loans)
loans.cor = cor(loans)
knitr::opts_chunk$set(echo = TRUE)
install.packages("corrplot")
library(corrplot)
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
install.packages("corrplot")
library(corrplot)
corrplot(loans.cor)
corrplot(loans)
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")
library(ggplot2)
boxplot(loans)
boxplot(loans$rep_income)
